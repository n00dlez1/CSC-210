Now that I have finished analyzing the starter file provided, I will move onto brainstorming what to do for the classes required.

CLASS NAME: Song.java
  Arguments: public Song(String title, String artist)

  Methods: 
    public String getTitle()
      simple getter method. no print statements, just return.
    public String getArtist()
      simple getter method. no print statements, just return.
    public int getTimesPlayed()
      simple getter method. no print statements, just return.
      *IDEA: the class song should have a private instance variable set at 0 upon creation. 
             everytime the method Play() is called, increment the variable by 1. (AFTER, not before)
    public void Play()
      Print description of the song. In this instance, just call toString().
    public String toString()
      FORMATTED LIKE: "Title by Artist, timesPlayed play(s)" EX: "American Pie by Don McLean, 100 play(s)"

CLASS NAME: Library.java
  Arguments: public Library() (None)

  Methods:
    public Song getSong(String title)
      Check the ArrayList (as described in addSong method) 
        check by using .getTitle() (Song method) and comparing it to passed argument. If matching, return that object.
        Otherwise, if no match found, return null.
    public void addSong(Song song)
      add song to Library using an ArrayList (because size can change). Song objects.
    public void removeSong(Song song)
      Use same method as described in getSong, but just remove the song if found.
        *Use ArrayList method remove()
    public String toString()
      *NOTE: Every String within the Library must be called with .toString(), with a newline for each. 
             It must be printed in alphabetical order by song name... So how do I keep it in alphabetical order?
                BRAINSTORM:   
                    When calling toString, parse through the entirety of the Library and add ONLY the TITLES of each song to an array.
                    Use the sort method of an array to sort it alphabetically.. 
                    Parse through the entirety of the array AGAIN:
                      Use getSong to pull the actual OBJECT. 
                      Call toString on the SongObject.
CLASS NAME: Playlist.java
  Constructors: 
    public Playlist (String name)
      *note, this constructor is used when creating the playlist with just the name such as in createPlayList method in PA4MAIN
      Initialize this ArrayList as empty.
    public Playlist (String name, List<Song> contents)  

  Methods:
    public String getName()
      simple getter method. no print statements, just return name of playlist.
    public void addSong(Song song)
      maybe create an ArrayList of Songs within the playlist.
    public void play()
      *NOTE: Must be "played" in a similar fashion as the toString method in Library. Maybe try the same method.
    public void removeSong(Song song)
      remove it from arrayList..
      

  CLASS NAME: User.java
    Constructors:
      public User(String name, String password)
        *note, there should be an instance variable for a List containing all Playlists..

    Methods:
      public String getName()
      public boolean attemptLogin(String password)
      public void addPlaylist(Playlist newPlaylist)
      public List<Playlist> getPlayLists()
        returns list of playlists for this user.
      public void selectPlayList(String name)
        takes the name and finds the specific playlist using Playlist method .getName(). (from list of user playlists)
        then uses .play() on that playlist.
      public String toString()
                    
