Okay.. So we have a starter file that already has some functionality and we need to create classes that can function in conjunction with this existing functionality.
So, the plan is to first look at and understand what is happening in the starter file, then move onto creating the requested classes..

Let''s begin.

STARTER FILE ANALYSIS:

ALL WITHIN CLASS PA4MAIN

METHOD NAME: main
    Function: 

METHOD NAME: prompt
    Function: 
        Prints all options. (Called in userInterface)

METHOD NAME: userInterface
    Args:     
        User currentUser: a class instance representing the current user.       
        UserCollection allUsers: a class instance representing a collection of all users.
        Library lib: a class instance representing all available songs.
        Scanner input: a Scanner object for user input.
              
    Details: 
        Initalizes the selection at 0, meaning no option has been chosen. Displays greeting message. 
        It runs continuously until the selection equals EXIT_SELECTION, a variable of 10. (Initialized in class PA4MAIN)
        The selected executes different features, then uses input.nextInt() to read the next choice. 
        If not valid integer, catches error with message.
        Calls prompt method.
              
    Function: 
        Takes main method result (a selection of 10 choices) and executes a method depending on which choice is selected.
    Returns: 
        Void

METHOD NAME: initSongLibrary
    Args: 
        String filename: name of file pulled from ?

    Details: 
        Creates Library object, reads from file line by line, parses it LINE by LINE.
        Create new Song instance per line of the file using line information. (TITLE, ARTIST) 
        Adds each Song instance to Library.

    Functions: 
        Creates a new Library object and fills it with songs from file.

    Returns: 
        instance of populated Library class

METHOD NAME: showPlayLists
    Args: 
        User curr: current user (instance of User class)
    Details:
        Checks if user is logged In. (Using different method)
        Calls method of User class on current user .getPlaylists()
        Prints name of each playlist.
    Functions: 
        Prints name of each playlist for the current user.
    Returns:
        Void

METHOD NAME: playPlayList
    Args:     
        User curr: current user (instance of User class)
        Scanner in: scanner object
    Details:
        Prints message to ask for the playlist name to be played.
        Reads the user input (from scanner created elsewhere)
        Calls User class method .selectPlaylist(name)

METHOD NAME: createPlayList
    Args:     
        User curr: current user (instance of User class)
        Library songs: instance of Library class
        Scanner in: scanner object
    Details:
        Prints message to ask for the playlist name to be created, then creates it.
        Creates Song instance and allows user to input song name. Checks if song exists in the Library.
            If it does, adds song to the created playlist.
            Otherwise, it does not add anything. 
            It continues until the user enters nothing.
        Adds Playlist to the specific user.
        Prints statement declaring the playlist has been created.

METHOD NAME: showSongs
    Args:     
        User curr: current user (instance of User class)
        Library allSongs: instance of Library class
    Details:
        Checks if user is logged in, then prints allSongs.

METHOD NAME: playSong
    Args:     
        User curr: current user (instance of User class)
        Scanner in: scanner object
        Library allSongs: instance of Library class
    Details:
        Checks if user is logged in.
        Prints message asking for song name.
        Reads using .nextLine().
        Finds and creates Song instance from Library using the passed name.
        Checks if song exists before playing it using Song class method play().

METHOD NAME: songExists
    Args:
        Song s: instance of Song class
    Details:    
        Returns true if song exists. False if not, and prints song not found statement.
    Returns: 
        Boolean depending on if song exists or not.

METHOD NAME: addNewUser
    Args:
        UserCollection all: instance of UserCollection class
        Scanner in: scanner object
    Details:    
        Prints statement asking for user name. Then reads user name from next line. Same for password.
        Creates new User instance with the (name, password) as read. 
        Prints statement declaring the user created.
